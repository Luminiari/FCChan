@using FC.Quotes;
@using FC.Utils;
@using System.Text;
@using NodaTime;
@using System.Globalization;
@using System.Reflection;
@using Microsoft.AspNetCore.Components.Rendering;
@using FC.Attributes;
@using FC.Manager.Client.Drawers;

@inherits Modal

@foreach (RenderFragment frag in this.Fragments)
{
	@frag;
}

<div class="modal-footer">
	<button type="button" class="btn btn-secondary" @onclick="this.OnCancel">Cancel</button>
	<div class="flex-fill" />
	<button type="button" class="btn btn-primary" @onclick="this.OnSave">Save</button>
</div>


@code {

	public List<RenderFragment> Fragments { get; set; } = new List<RenderFragment>();
	public List<Channel> ChannelList { get; set; }

	public async Task Initialize(object obj)
	{
		Type type = obj.GetType();

		this.ChannelList = new List<Channel>()
		{
			new Channel(0, "None", FC.Channel.Types.Unknown),
		};

		this.ChannelList.AddRange(await Channels.GetChannels());

		foreach (PropertyInfo prop in type.GetProperties(BindingFlags.Public | BindingFlags.Instance))
		{
			Type drawerType = this.GetDrawerType(prop);

			if (drawerType == null)
				continue;

			RenderFragment content = new RenderFragment(x =>
			{
				x.OpenComponent(1, drawerType);
				x.AddAttribute(0, "Property", prop);
				x.AddAttribute(1, "Target", obj);
				x.CloseComponent();
			});
			this.Fragments.Add(content);
		}
	}

	private void OnCancel()
	{
		this.Close();
	}

	private void OnSave()
	{
		this.Close();
	}

	private Type GetDrawerType(PropertyInfo property)
	{
		// Hiden
		if (property.GetCustomAttribute<InspectorHiddenAttribute>() != null)
			return null;

		if (property.GetCustomAttribute<InspectorChannelAttribute>() != null)
			return typeof(Drawers.ChannelDrawer);

		return typeof(Drawers.StringDrawer);
	}
}
