@page "/OAuth/"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IModalService Modal

@code
{
	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		string code = NavigationManager.GetQuerryParameter("code");
		string url = NavigationManager.GetURL();

		try
		{
			string token = await this.Http.Invoke<string>("AuthenticationService.AuthenticateCode", url, code);

			if (string.IsNullOrEmpty(token))
				throw new Exception("Invalid token");

			RPC.RPCService.AuthToken = token;
			NavigationManager.NavigateTo("/");
		}
		catch (Exception ex)
		{
			ModalParameters parameters = new ModalParameters();
			parameters.Add("Content", ex.Message);
			this.Modal.Show("Authentication Error", typeof(GenericModal), parameters);
			this.Modal.OnClose += (ModalResult) =>
			{
				NavigationManager.NavigateTo("/");
			};
		}
	}
}