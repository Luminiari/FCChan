@page "/events"
@using FC.Events;
@using FC.Utils;
@using NodaTime;
@using System.Globalization;

@inject HttpClient Http
@inject IModalService Modal
@inject NavigationManager NavigationManager

@if (this.AllEvents == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<div class="wrapper">
		<table class="table table-dark">
			<thead>
				<tr>
					<th width="15%">Name</th>
					<th>Description</th>
					<th width="20%">Channel</th>
					<th width="15%">Next Occurance</th>
				</tr>
			</thead>
			<tbody>
				@foreach (Event evt in this.AllEvents)
				{
					<tr @onclick="() => this.OnEdit(evt)" class="table-clickable">
						<td>@evt.Name</td>
						<td>@evt.Description</td>
						<td>@evt.GetChannelName(this.AllChannels)</td>
						<td>@evt.GetNextOccuranceString()</td>
					</tr>
				}
			</tbody>
		</table>

		<div class="push"></div>
	</div>
	<div class="footer">
		<div class="footer-content">
			<button class="btn btn-primary" @onclick="this.OnCreateNew">New</button>
		</div>
	</div>
}

@code {

	public List<Event> AllEvents;
	public List<Channel> AllChannels;

	protected override async Task OnInitializedAsync()
	{
		if (!RPC.RPCService.IsAuthenticated)
		{
			this.NavigationManager.NavigateTo("/");
			return;
		}

		await base.OnInitializedAsync();

		this.AllChannels = await this.Http.GetJsonAsync<List<Channel>>("ChannelsAPI");
		this.AllEvents = await this.Http.GetJsonAsync<List<Event>>("EventsAPI");
	}

	protected void OnEdit(Event evt)
	{
		ModalParameters parameters = new ModalParameters();
		parameters.Add("Event", evt);
		this.Modal.Show("Edit Event", typeof(EventEditor), parameters);
		this.Modal.OnClose += this.OnModalClosed;
	}

	protected void OnCreateNew()
	{
		Event evt = new Event();

		// todo: selectors for these...
		evt.RemindMeEmote = "<:RemindMe:604942582988013568>";
		evt.Statuses = new List<Event.Status>()
	{
			new Event.Status("<:Yes:604942582866247690>", "Attending"),
			new Event.Status("<:Maybe:604942582795075595>"),
			new Event.Status("<:No:604942582589423618>", "Not Attending"),
		};

		evt.Id = Guid.NewGuid().ToString();
		OnEdit(evt);
	}

	private async void OnModalClosed(ModalResult result)
	{
		Modal.OnClose -= this.OnModalClosed;

		if (result.Data is DataAction<Event> evtAction)
		{
			switch (evtAction.Action)
			{
				case Actions.Nothing:
				{
					break;
				}
				case Actions.Update:
				{
					await this.Http.PostJsonAsync("EventsAPI", evtAction);
					this.AllEvents = await this.Http.GetJsonAsync<List<Event>>("EventsAPI");
					this.StateHasChanged();
					break;
				}
				case Actions.Delete:
				{
					ModalParameters parameters = new ModalParameters();
					parameters.Add("Content", evtAction.Data.Name);
					this.Modal.Show("Delete Event", typeof(ConfirmDelete), parameters);
					this.Modal.OnClose += async (ModalResult res) =>
					{
						if (!res.Cancelled)
						{
							await this.Http.PostJsonAsync("EventsAPI", evtAction);
							this.AllEvents = await this.Http.GetJsonAsync<List<Event>>("EventsAPI");
							this.StateHasChanged();
						}
					};

					break;
				}
			}
		}

	}
}
