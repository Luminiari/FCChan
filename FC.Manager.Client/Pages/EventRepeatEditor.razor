@using FC.Events;
@using FC.Utils;
@using NodaTime;
@using NodaTime.Text;
@using NodaTime.TimeZones;

@inject HttpClient Http
@inject IModalService Modal
@inject NavigationManager NavigationManager


<div class="form-row">

	@if (!this.IsBase)
	{
		<div class="form-group col-md-4">
			<div class="custom-control custom-checkbox custom-control-inline">
				<input class="custom-control-input" type="checkbox" id="@(this.Day + "Checkbox")" value="true" @bind="this.Enabled" />
				<label class="custom-control-label" for="@(this.Day + "Checkbox")">@this.Day.ToString()</label>
			</div>
		</div>
	}
	else
	{
		<div class="form-group col-md-4">
			<label for="eventDesc">Date</label>
			<input type="date" class="form-control dateTime" id="eventDate" name="eventeDate" @bind="this.Date"/>
		</div>
	}

	@if (this.Enabled)
	{
		<div class="col-md-4">
			@if (this.IsBase){<label for="eventDesc">Time</label>}
			<input type="time" class="form-control dateTime" id="eventTime" name="eventTime" @bind="this.Time" />
		</div>

		<div class="col-md-4">
			@if (this.IsBase){<label for="eventDesc">Duration</label>}
			<small id="emailHelp" class="form-text" style="margin-top:0px">@this.DurationString</small>
			<input name="eventDuration" type="range" class="form-control-range" min="0.25" max="6" step="0.25" @bind-value="this.Duration" @oninput="OnDurationChanged" style="width:100%" />
		</div>
	}
</div>


@code {
	[Parameter]
	public Event Event { get; set; }

	[Parameter]
	public IsoDayOfWeek Day { get; set; }

	public bool IsBase
	{
		get
		{
			return this.Day == IsoDayOfWeek.None;
		}
	}

	public bool Enabled
	{
		get
		{
			if (this.IsBase)
				return true;

			return this.Event.GetRepeat(this.Day) != null;
		}

		set
		{
			if (value)
			{
				Event.Occurance rpt = new Event.Occurance();
				rpt.Time = this.Event.BaseOccurance.Time;
				rpt.Duration = this.Event.BaseOccurance.Duration;
				this.Event.SetRepeat(this.Day, rpt);
			}
			else
			{
				this.Event.SetRepeat(this.Day, null);
			}
		}
	}

	public string DurationString
	{
		get
		{
			return TimeUtils.GetDurationString(this.Duration);
		}
	}

	public double Duration
	{
		get
		{
			if (this.Repeat == null)
				return 0;

			Duration dur = this.Repeat.Duration;
			return dur.Hours + (dur.Minutes / 60.0);
		}

		set
		{
			if (this.Repeat == null)
				return;

			int hours = (int)value;
			int minutes = (int)((value - (double)hours) * 60.0);

			this.Repeat.Duration = NodaTime.Duration.FromMinutes((hours * 60) + minutes);
		}
	}

	public DateTimeOffset? Time
	{
		get
		{
			if (this.Repeat == null)
				return null;

			if (this.Repeat.Time == null)
				this.Repeat.Time = TimeUtils.Now.InUtc().LocalDateTime.TimeOfDay;

			DateTimeZone dtz = NodaTime.DateTimeZoneProviders.Tzdb.GetSystemDefault();
			Instant instant = this.Repeat.GetInstant(TimeUtils.Now.InUtc().LocalDateTime.Date);
			LocalTime lt = instant.InZone(dtz).TimeOfDay;

			return instant.ToDateTimeOffset();

			////string str = lt.Hour.ToString("D2") + ":" + lt.Minute.ToString("D2");
			////return str;
		}

		set
		{
			if (this.Repeat == null)
				return;

			/*string[] parts = value.Split(':');
			int hour = int.Parse(parts[0]);
			int minute = int.Parse(parts[1]);

			DateTimeZone dtz = NodaTime.DateTimeZoneProviders.Tzdb.GetSystemDefault();
			ZonedDateTime nowZdt = TimeUtils.Now.InZone(dtz);

			LocalDateTime ldt = new LocalDateTime(nowZdt.Year, nowZdt.Month, nowZdt.Day, hour, minute);
			ZonedDateTime zdt = ldt.InZoneLeniently(dtz);
			Instant instant = zdt.ToInstant();

			*/

			Instant instant = Instant.FromDateTimeOffset((DateTimeOffset)value);
			ZonedDateTime utc = instant.InUtc();
			this.Repeat.Time = utc.TimeOfDay;
		}
	}

	public DateTime Date
	{
		get
		{
			if (this.Repeat.Date == null)
				this.Repeat.Date = TimeUtils.Now.InUtc().LocalDateTime.Date;

			if (this.Repeat.Time == null)
				this.Repeat.Time = TimeUtils.Now.InUtc().LocalDateTime.TimeOfDay;

			DateTimeZone dtz = NodaTime.DateTimeZoneProviders.Tzdb.GetSystemDefault();
			return this.Repeat.GetInstant().InZone(dtz).Date.ToDateTimeUnspecified();

			////return this.Repeat.Date.Value.ToDateTimeUnspecified();
		}

		set
		{
			this.Repeat.Date = new LocalDate(value.Year, value.Month, value.Day);
		}
	}

	public Event.Occurance Repeat
	{
		get
		{
			if (this.IsBase)
				return this.Event.BaseOccurance;

			return this.Event.GetRepeat(this.Day);
		}
	}

	private void OnDurationChanged(ChangeEventArgs e)
	{
		this.Duration = double.Parse((string)e.Value);
	}
}
