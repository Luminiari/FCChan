@page "/OAuth/"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IModalService Modal

@code
{
	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		string code = NavigationManager.GetQuerryParameter("code");

		AuthenticationRequest request = new AuthenticationRequest();
		request.URL = NavigationManager.GetURL();
		request.DiscordCode = code;

		AuthenticationRequest response = await this.Http.PostJsonAsync<AuthenticationRequest>("AuthenticationAPI", request);


		if (response.Token != null)
		{
			Authentication.Token = response.Token;
			NavigationManager.NavigateTo("/");
		}
		else
		{
			ModalParameters parameters = new ModalParameters();
			parameters.Add("Content", response.Message);
			this.Modal.Show("Authentication Error", typeof(GenericModal), parameters);
			this.Modal.OnClose += (ModalResult) =>
			{
				NavigationManager.NavigateTo("/");
			};
		}
	}
}