@using KupoNuts.Events;
@using KupoNuts.Utils;
@inject HttpClient Http
@inject IModalService Modal

<div class="form-row">
	<!-- Name -->
	<div class="form-group col-md-12">
		<label for="eventName">Token</label>
		<input type="text" class="form-control" name="eventName" placeholder="Enter discord bot token" @bind="this.Token" />
	</div>
</div>

<div class="form-row">
	<!--  Log Channel -->
	<div class="form-group col-md-6">
		<label for="channelSelect">Log Channel</label>
		<select class="custom-select" id="channelSelect" name="channelSelect" @bind="this.LogChannel">
			@foreach (Channel channl in this.ChannelList)
			{
				<option value=@channl.DiscordId>@channl.Name</option>
			}
		</select>
	</div>

	<!--  Status Channel -->
	<div class="form-group col-md-6">
		<label for="channelSelect">Status Channel</label>
		<select class="custom-select" id="channelSelect" name="channelSelect" @bind="this.StatusChannel">
			@foreach (Channel channl in this.ChannelList)
			{
				<option value=@channl.DiscordId>@channl.Name</option>
			}
		</select>
	</div>
</div>

<div class="form-row">
	<!--  Calendar Channel -->
	<div class="form-group col-md-6">
		<label for="channelSelect">Calendar Channel</label>
		<select class="custom-select" id="channelSelect" name="channelSelect" @bind="this.CalendarChannel">
			@foreach (Channel channl in this.ChannelList)
			{
				<option value=@channl.DiscordId>@channl.Name</option>
			}
		</select>
	</div>

	<!--  User Log Channel -->
	<div class="form-group col-md-6">
		<label for="channelSelect">User Log Channel</label>
		<select class="custom-select" id="channelSelect" name="userLogSelect" @bind="this.UserLogChannel">
			@foreach (Channel channl in this.ChannelList)
			{
				<option value=@channl.DiscordId>@channl.Name</option>
			}
		</select>
	</div>
</div>


<div class="modal-footer">
	<div class="flex-fill" />
	<button type="button" class="btn btn-primary" @onclick="this.OnSave">Save</button>
	<button type="button" class="btn btn-secondary" @onclick="this.OnClose">Close</button>
</div>


@code 
{
	public List<Channel> ChannelList { get; set; }

	public string Token;
	public string LogChannel;
	public string StatusChannel;
	public string CalendarChannel;
	public string UserLogChannel;

	private Settings settings;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		this.ChannelList = new List<Channel>()
		{
			new Channel(0, "None", KupoNuts.Channel.Types.Unknown),
		};

		this.settings = await this.Http.GetJsonAsync<Settings>("SettingsAPI");

		this.Token = this.settings.Token;

		this.ChannelList.AddRange(await Channels.GetChannels(this.Http, KupoNuts.Channel.Types.Text));

		this.LogChannel = string.IsNullOrEmpty(this.settings.LogChannel) ? "0" : this.settings.LogChannel;
		this.StatusChannel = string.IsNullOrEmpty(this.settings.StatusChannel) ? "0" : this.settings.StatusChannel;
		this.CalendarChannel = string.IsNullOrEmpty(this.settings.CalendarChannel) ? "0" : this.settings.CalendarChannel;
	}

	private async void OnSave()
	{
		this.settings.Token = this.Token;
		this.settings.LogChannel = this.LogChannel == "0" ? null : this.LogChannel;
		this.settings.StatusChannel = this.StatusChannel == "0" ? null : this.StatusChannel;
		this.settings.CalendarChannel = this.CalendarChannel == "0" ? null : this.CalendarChannel;
		this.settings.UserLogChannel = this.UserLogChannel;


		await this.Http.PostJsonAsync("SettingsAPI", this.settings);

		this.Modal.Close(ModalResult.Ok<bool>(true));
	}

	private void OnClose()
	{
		this.Modal.Cancel();
	}
}
