@using KupoNuts.Quotes;
@using KupoNuts.Utils;
@using System.Text;
@using NodaTime;
@using System.Globalization;

@inject HttpClient Http
@inject IModalService Modal
@inject NavigationManager NavigationManager

<div class="form-row">
	<!-- Name -->
	<div class="form-group col-md-6">
		<label>@this.UserName</label>
	</div>

	<!--  Notify -->
	<div class="form-group col-md-6">
		<label>@this.DateTime</label>
	</div>
</div>

<div class="form-row">
	<!--  Description -->
	<div class="form-group col-md-12">
		<label>@this.Content</label>
	</div>
</div>

<div class="modal-footer">
	<button type="button" class="btn btn-danger" @onclick="this.OnDelete">Delete</button>
	<div class="flex-fill" />
	<button type="button" class="btn btn-secondary" @onclick="this.OnClose">Close</button>
</div>


@code {
	[CascadingParameter] ModalParameters Parameters { get; set; }

	public string UserName;
	public string DateTime;
	public string Content;

	private Quote quote;

	protected override async Task OnInitializedAsync()
	{
		Authentication.Initialize(this.Http, this.NavigationManager);

		await base.OnInitializedAsync();

		this.quote = Parameters.Get<Quote>("Quote");

		this.UserName = this.quote.UserName;
		this.DateTime = GetDateTimeString(this.quote);
		this.Content = this.quote.Content;
	}

	private void OnClose()
	{
		this.Modal.Close(ModalResult.Ok(new DataAction<Quote>(this.quote, Actions.Nothing)));
	}

	private void OnDelete()
	{
		this.Modal.Close(ModalResult.Ok(new DataAction<Quote>(this.quote, Actions.Delete)));
	}

	private static string GetDateTimeString(Quote self)
	{
		DateTimeZone zone = DateTimeZoneProviders.Tzdb.GetSystemDefault();
		ZonedDateTime zdt = self.GetDateTime().InZone(zone);
		StringBuilder builder = new StringBuilder();
		builder.Append(zdt.ToString("hh:mm ", CultureInfo.InvariantCulture));
		builder.Append(zdt.ToString("tt", CultureInfo.InvariantCulture).ToLower());
		builder.Append(zdt.ToString(" dd/MM/yyyy", CultureInfo.InvariantCulture).ToLower());
		return builder.ToString();
	}
}
