@page "/quotes"

@using KupoNuts.Quotes;
@using KupoNuts.Utils;
@using System.Text;
@using NodaTime;
@using System.Globalization;

@inject HttpClient Http
@inject IModalService Modal
@inject NavigationManager NavigationManager

@if (this.AllQuotes == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<div class="wrapper">
		<table class="table table-dark">
			<thead>
				<tr>
					<th>Message</th>
					<th width="10%">Author</th>
					<th width="20%">Date Time</th>
				</tr>
			</thead>
			<tbody>
				@foreach (Quote evt in this.AllQuotes)
				{
					<tr @onclick="() => this.OnEdit(evt)" class="table-clickable">
						<td>@evt.Content</td>
						<td>@evt.UserName</td>
						<td>@GetDateTimeString(evt)</td>
					</tr>
				}
			</tbody>
		</table>

		<div class="push"></div>
	</div>
}

@code {

	public List<Quote> AllQuotes;

	protected override async Task OnInitializedAsync()
	{
		Authentication.Initialize(this.Http, this.NavigationManager);

		await base.OnInitializedAsync();

		this.AllQuotes = await this.Http.GetJsonAsync<List<Quote>>("QuotesAPI");
	}

	protected void OnEdit(Quote evt)
	{
		ModalParameters parameters = new ModalParameters();
		parameters.Add("Quote", evt);
		this.Modal.Show("Edit Quote", typeof(QuoteEditor), parameters);
		this.Modal.OnClose += this.OnModalClosed;
	}

	private static string GetDateTimeString(Quote self)
	{
		DateTimeZone zone = DateTimeZoneProviders.Tzdb.GetSystemDefault();
		ZonedDateTime zdt = self.GetDateTime().InZone(zone);
		StringBuilder builder = new StringBuilder();
		builder.Append(zdt.ToString("hh:mm ", CultureInfo.InvariantCulture));
		builder.Append(zdt.ToString("tt", CultureInfo.InvariantCulture).ToLower());
		builder.Append(zdt.ToString(" dd/MM/yyyy", CultureInfo.InvariantCulture).ToLower());
		return builder.ToString();
	}

	private void OnModalClosed(ModalResult result)
	{
		Modal.OnClose -= this.OnModalClosed;

		if (result.Data is DataAction<Quote> action)
		{
			switch (action.Action)
			{
				case Actions.Nothing:
				{
					break;
				}
				case Actions.Delete:
				{
					ModalParameters parameters = new ModalParameters();
					parameters.Add("Content", action.Data.Content);
					this.Modal.Show("Delete Quote", typeof(ConfirmDelete), parameters);
					this.Modal.OnClose += async (ModalResult res) =>
					{
						if (!res.Cancelled)
						{
							await this.Http.PostJsonAsync("QuotesAPI", action);
							this.AllQuotes = await this.Http.GetJsonAsync<List<Quote>>("QuotesAPI");
							this.StateHasChanged();
						}
					};

					break;
				}
			}
		}

	}
}
