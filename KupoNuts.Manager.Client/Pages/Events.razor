@page "/events"
@using KupoNuts.Events;
@using KupoNuts.Utils;
@using NodaTime;
@using System.Globalization;
@inject HttpClient Http
@inject IModalService Modal

@if (this.AllEvents == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<div class="wrapper">
		<table class="table table-dark">
			<thead>
				<tr>
					<th>Name</th>
					<th>Description</th>
					<th width="15%">Next Occurance</th>
				</tr>
			</thead>
			<tbody>
				@foreach (Event evt in this.AllEvents)
				{
					<tr @onclick="() => this.OnEdit(evt)" class="table-clickable">
						<td>@evt.Name</td>
						<td>@evt.Description</td>
						<td>@evt.GetNextOccurance()</td>
					</tr>
				}
			</tbody>
		</table>

		<div class="push"></div>
	</div>
	<div class="footer">
		<div class="footer-content">
			<button class="btn btn-primary" @onclick="this.OnCreateNew">New</button>
		</div>
	</div>
}

@code {

	public List<Event> AllEvents;

	protected override async Task OnInitAsync()
	{
		this.AllEvents = await this.Http.GetJsonAsync<List<Event>>("EventsAPI");
	}

	protected void OnEdit(Event evt)
	{
		ModalParameters parameters = new ModalParameters();
		parameters.Add("Event", evt);
		this.Modal.Show("Edit Event", typeof(EventEditor), parameters);
		this.Modal.OnClose += this.OnModalClosed;
	}

	protected void OnCreateNew()
	{
		Event evt = new Event();
		evt.Id = Guid.NewGuid().ToString();
		OnEdit(evt);
	}

	private async void OnModalClosed(ModalResult result)
	{
		Modal.OnClose -= this.OnModalClosed;

		if (result.Data is EventAction evtAction)
		{
			switch (evtAction.Action)
			{
				case EventAction.Actions.Nothing:
				{
					break;
				}
				case EventAction.Actions.Update:
				{
					await this.Http.PostJsonAsync("EventsAPI", evtAction);
					this.AllEvents = await this.Http.GetJsonAsync<List<Event>>("EventsAPI");
					this.StateHasChanged();
					break;
				}
				case EventAction.Actions.Delete:
				{
					ModalParameters parameters = new ModalParameters();
					parameters.Add("Event", evtAction.Event);
					this.Modal.Show("Delete Event", typeof(ConfirmDelete), parameters);
					this.Modal.OnClose += this.OnModalClosed;
					break;
				}
				case EventAction.Actions.DeleteConfirmed:
				{
					await this.Http.PostJsonAsync("Events", evtAction);
					this.AllEvents = await this.Http.GetJsonAsync<List<Event>>("EventsAPI");
					this.StateHasChanged();
					break;
				}
			}
		}

	}
}
